// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FplanKit
import Combine
import Foundation
@_exported import FplanKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
public struct Route {
}
public struct JRoute : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc @available(iOS 13.0, *)
public class FpHandler : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  public init(_ fplanReadyHandler: (() -> Swift.Void)!)
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc @available(iOS 13.0, *)
public class BoothHandler : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  public init(_ boothSelectionHandler: ((_ boothName: Swift.String) -> Swift.Void)!)
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc @available(iOS 13.0, *)
public class RouteHandler : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  public init(_ routeBuildHandler: ((_ route: FplanKit.Route) -> Swift.Void)!)
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
@available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public struct FplanView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) public init(_ url: Swift.String, fplanReadyHandler: (() -> Swift.Void)? = nil, boothSelectionHandler: ((_ boothName: Swift.String) -> Swift.Void)? = nil, routeBuildHandler: ((_ route: FplanKit.Route) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: FplanKit.FplanView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func selectBooth(_ boothName: Swift.String)
  @_Concurrency.MainActor(unsafe) public func buildRoute(_ from: Swift.String, _ to: Swift.String, _ exceptUnaccessible: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: WebKit.WKWebView, context: FplanKit.FplanView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = WebKit.WKWebView
}
@_Concurrency.MainActor(unsafe) public struct FplanView_Previews : SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public static var previews: some SwiftUI.View {
    get
  }
  public typealias Previews = @_opaqueReturnTypeOf("$s8FplanKit0A13View_PreviewsV8previewsQrvpZ", 0) __
}
