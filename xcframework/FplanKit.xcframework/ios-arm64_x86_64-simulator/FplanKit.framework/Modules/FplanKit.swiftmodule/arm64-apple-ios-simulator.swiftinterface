// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FplanKit
import Combine
import Foundation
@_exported import FplanKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
@available(iOS 13.0, *)
public struct FplanView : SwiftUI.UIViewRepresentable {
  public init(_ url: Swift.String, eventId: Swift.String? = nil, noOverlay: Swift.Bool = true, configuration: FplanKit.Configuration? = nil, selectBoothAction: ((_ boothName: Swift.String) -> Swift.Void)? = nil, fpReadyAction: (() -> Swift.Void)? = nil, buildDirectionAction: ((_ direction: FplanKit.Direction) -> Swift.Void)? = nil)
  public init(_ url: Swift.String, eventId: Swift.String? = nil, noOverlay: Swift.Bool = true, configuration: FplanKit.Configuration? = nil, selectedBooth: SwiftUI.Binding<Swift.String?>? = nil, route: FplanKit.Route? = nil, currentPosition: FplanKit.BlueDotPoint? = nil, focusOnCurrentPosition: Swift.Bool = false, fpReadyAction: (() -> Swift.Void)? = nil, buildDirectionAction: ((_ direction: FplanKit.Direction) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: FplanKit.FplanView.Context) -> FplanKit.FSWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: FplanKit.FSWebView, context: FplanKit.FplanView.Context)
  public func selectBooth(_ boothName: Swift.String?)
  public func buildRoute(_ route: FplanKit.Route?)
  public func setCurrentPosition(_ position: FplanKit.BlueDotPoint?, _ focus: Swift.Bool = false)
  public func clear()
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = FplanKit.FSWebView
}
@available(iOS 13.0.0, *)
@_Concurrency.MainActor(unsafe) public struct FplanView_Previews : SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public static var previews: some SwiftUI.View {
    get
  }
  public typealias Previews = @_opaqueReturnTypeOf("$s8FplanKit0A13View_PreviewsV8previewsQrvpZ", 0) __
}
public struct FileInfo : Swift.Codable {
  public let name: Swift.String
  public let serverUrl: Swift.String
  public let cachePath: Swift.String
  public let version: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.NSURL {
  public func mimeType() -> Swift.String
}
extension Foundation.URL {
  public func mimeType() -> Swift.String
}
extension Foundation.NSString {
  public func mimeType() -> Swift.String
}
extension Swift.String {
  public func mimeType() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FSWebView : WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var safeAreaInsets: UIKit.UIEdgeInsets {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Direction {
  public let distance: Swift.String
  public let duration: Foundation.TimeInterval
  public let from: FplanKit.Booth
  public let to: FplanKit.Booth
  public let lines: [FplanKit.Line]
}
public struct Route : Swift.Equatable {
  public let from: Swift.String
  public let to: Swift.String
  public let exceptInaccessible: Swift.Bool
  public init(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool)
  public static func == (r1: FplanKit.Route, r2: FplanKit.Route) -> Swift.Bool
}
public struct Configuration : Swift.Codable {
  public let noOverlay: Swift.Bool
  public let androidHtmlUrl: Swift.String?
  public let iosHtmlUrl: Swift.String?
  public let files: [FplanKit.FileInfo]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Line {
  public let startPoint: FplanKit.Point
  public let endPoint: FplanKit.Point
  public let weight: Swift.Int
}
public struct BlueDotPoint : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Int
  public let y: Swift.Int
  public let z: Swift.String?
  public let angle: Swift.Int?
  public init(x: Swift.Int, y: Swift.Int)
  public init(x: Swift.Int, y: Swift.Int, z: Swift.String? = nil, angle: Swift.Int? = nil)
  public static func == (p1: FplanKit.BlueDotPoint, p2: FplanKit.BlueDotPoint) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct Booth : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct Point : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Int
  public let y: Swift.Int
  public init(x: Swift.Int, y: Swift.Int)
  public static func == (p1: FplanKit.Point, p2: FplanKit.Point) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
