// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FplanKit
import Combine
import Foundation
@_exported import FplanKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
@available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public struct FplanView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) public init(_ url: Swift.String, selectedBooth: SwiftUI.Binding<Swift.String?>? = nil, route: FplanKit.Route? = nil, currentPosition: FplanKit.Point? = nil, focusOnCurrentPosition: Swift.Bool = false, buildDirectionAction: ((_ direction: FplanKit.Direction) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: FplanKit.FplanView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: WebKit.WKWebView, context: FplanKit.FplanView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = WebKit.WKWebView
}
@_Concurrency.MainActor(unsafe) public struct FplanView_Previews : SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public init()
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public static var previews: some SwiftUI.View {
    get
  }
  public typealias Previews = @_opaqueReturnTypeOf("$s8FplanKit0A13View_PreviewsV8previewsQrvpZ", 0) __
}
public struct Direction {
  public let distance: Swift.String
  public let duration: Foundation.TimeInterval
  public let from: FplanKit.Booth
  public let to: FplanKit.Booth
  public let lines: [FplanKit.Line]
}
public struct Route {
  public let from: Swift.String
  public let to: Swift.String
  public let exceptInaccessible: Swift.Bool
  public init(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool)
}
public struct Line {
  public let startPoint: FplanKit.Point
  public let endPoint: FplanKit.Point
  public let weight: Swift.Int
}
public struct Booth : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct Point : Swift.Decodable {
  public let x: Swift.Int
  public let y: Swift.Int
  public init(x: Swift.Int, y: Swift.Int)
  public init(from decoder: Swift.Decoder) throws
}
