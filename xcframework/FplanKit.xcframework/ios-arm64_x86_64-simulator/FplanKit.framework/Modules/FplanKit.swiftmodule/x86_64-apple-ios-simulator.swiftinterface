// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FplanKit
import Combine
import Foundation
@_exported import FplanKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
@available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public struct FplanView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) public init(_ url: Swift.String, fplanReadyHandler: (() -> Swift.Void)? = nil, boothSelectionHandler: ((_ boothName: Swift.String) -> Swift.Void)? = nil, routeBuildHandler: ((_ route: FplanKit.Route) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: FplanKit.FplanView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func selectBooth(_ boothName: Swift.String)
  @_Concurrency.MainActor(unsafe) public func buildRoute(_ from: Swift.String, _ to: Swift.String, _ exceptUnaccessible: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setCurrentPosition(_ x: Swift.Int, _ y: Swift.Int, _ focus: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: WebKit.WKWebView, context: FplanKit.FplanView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = WebKit.WKWebView
}
@_Concurrency.MainActor(unsafe) public struct FplanView_Previews : SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public init()
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public static var previews: some SwiftUI.View {
    get
  }
  public typealias Previews = @_opaqueReturnTypeOf("$s8FplanKit0A13View_PreviewsV8previewsQrvpZ", 0) __
}
public struct Route {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0.0, *)
public class Helper {
  public static func getCacheDirectory() -> Foundation.URL
  public static func updateAllFiles(baseUrl: Foundation.URL!, directory: Foundation.URL!) throws
  public static func getIndexHtml() -> Swift.String
  @objc deinit
}
